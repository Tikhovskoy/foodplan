from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.keyboards.reply import get_subscription_kb, get_meal_type_kb
from bot.states import MealTypeStates
from bot.shared.send_tools import send_recipe
from users.models import TelegramUser
from recipes.models import Recipe
from random import choice
from asgiref.sync import sync_to_async
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    user, created = await sync_to_async(TelegramUser.objects.get_or_create)(
        telegram_id=message.from_user.id,
        defaults={
            "username": message.from_user.username or f"tg_{message.from_user.id}",
            "first_name": message.from_user.first_name or "",
            "last_name": message.from_user.last_name or ""
        }
    )

    if user.has_active_subscription():
        meal_type_kb = await get_meal_type_kb()
        await message.answer(
            "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:",
            reply_markup=meal_type_kb
        )
        await state.set_state(MealTypeStates.waiting_for_meal_type)
    else:
        buttons = [
            ("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_subscription"),
            ("üçΩ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", "get_free_recipe"),
        ]
        await message.answer(
            "üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:",
            reply_markup=get_subscription_kb(buttons)
        )

@router.callback_query(F.data == "get_free_recipe")
async def get_free_recipe(callback: CallbackQuery, state: FSMContext):
    try:
        user = await sync_to_async(TelegramUser.objects.get)(telegram_id=callback.from_user.id)

        if not user.can_get_free_recipe():
            await callback.message.answer("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            await callback.answer()
            return

        recipes = await sync_to_async(list)(Recipe.objects.filter(is_active=True))

        if not recipes:
            await callback.message.answer("‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return

        recipe = choice(recipes)

        caption = f"üçΩ –í–∞—à —Ä–µ—Ü–µ–ø—Ç:\n\nüìì {recipe.title}\n\nüìù {recipe.description}"
        await send_recipe(
            callback.message,
            caption=caption,
            image_field=recipe.image,
            reply_markup=None
        )

        user.last_free_recipe = timezone.now().date()
        await sync_to_async(user.save)()

        await state.clear()

        await callback.message.answer(
            "üöÄ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ä–µ—Ü–µ–ø—Ç–∞–º, –¥–∏–µ—Ç–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!",
            reply_markup=get_subscription_kb([
                ("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_subscription"),
            ])
        )

        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.")
