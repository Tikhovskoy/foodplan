from aiogram import Router, F
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from recipes.models import Recipe
import random
import os
from aiogram import types
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from django.contrib.sites.shortcuts import get_current_site
from django.conf import settings


router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –†–µ—Ü–µ–ø—Ç –¥–Ω—è", callback_data='recipe')],
            [
                InlineKeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorite'),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='setting_order')
            ],
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n"
        "üîπ –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–Ω—è?\n"
        "üîπ –ù—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?\n"
        "üîπ –ò–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–≤–µ–≥–∞–Ω, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞)?\n\n"
        "–í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é!",
        reply_markup=keyboard
    )


@sync_to_async
def get_random_recipe_data():
    recipes = list(Recipe.objects.filter(is_active=True))
    if not recipes:
        return None

    recipe = random.choice(recipes)

    ingredients = [
        f"{ri.ingredient.name} ‚Äî {ri.amount} {ri.get_unit_display()}"
        for ri in recipe.recipeingredient_set.all()
    ]

    steps = [
        f"{s.order}. {s.text}"
        for s in recipe.steps.all().order_by("order")
    ]

    return {
        "title": recipe.title,
        "ingredients": ingredients,
        "steps": steps,
        "image": FSInputFile(recipe.image.path) if recipe.image else None,
        "step_images": [
            FSInputFile(s.image.path) if s.image else None
            for s in recipe.steps.all().order_by("order")
        ],
        "price": recipe.estimated_cost,
    }


@router.callback_query(lambda c: c.data == "recipe")
async def get_recipe(callback: types.CallbackQuery):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–µ
    recipe_data = await get_random_recipe_data()


    if recipe_data:
        ingredients = "\n".join(recipe_data['ingredients'])
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
        message = f"üçΩÔ∏è –†–µ—Ü–µ–ø—Ç –¥–Ω—è: {recipe_data['title']}\n\n{ingredients}"


        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if recipe_data['image']:
            await callback.message.answer_photo(
                photo=recipe_data['image'],
                caption=message
            )
        else:
            await callback.message.answer(message)  # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        # ingredients_message = "üõí –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(recipe_data['ingredients'])
        # await callback.message.answer(ingredients_message)

        # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        for step, step_image_url in zip(recipe_data['steps'], recipe_data['step_images']):
            step_message = f"{step}\n"
            if step_image_url:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                await callback.message.answer_photo(photo=step_image_url, caption=step_message)
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —à–∞–≥–∞
                await callback.message.answer(step_message)


    else:
        await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    price = f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–ª—é–¥–∞ {recipe_data["price"]} —Ä—É–±.'
    await callback.message.answer(price)