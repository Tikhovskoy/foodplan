import pytest
from unittest.mock import AsyncMock, MagicMock
from bot.services.subscription_service import subscription_service
from bot.logic.exceptions import RecipeNotFound
from bot.keyboards.reply import get_buy_subscription_kb
from bot.handlers.show_recipes import next_recipe
from aiogram.fsm.context import FSMContext


@pytest.mark.asyncio
async def test_next_recipe_with_active_subscription(mock_callback, mock_fsm):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:
    –ú–µ—Ç–æ–¥ send_recipes –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.
    """
    # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_service.check_active = AsyncMock(return_value=True)  # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞

    # –ú–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ send_recipes
    mock_send_recipes = AsyncMock()
    subscription_service.send_recipes = mock_send_recipes  # –ü–æ–¥–º–µ–Ω—è–µ–º send_recipes –Ω–∞ –º–æ–∫

    # –í—ã–∑—ã–≤–∞–µ–º next_recipe
    await next_recipe(mock_callback, mock_fsm)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ send_recipes –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_send_recipes.assert_called_once()  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ send_recipes –±—ã–ª –≤—ã–∑–≤–∞–Ω

@pytest.mark.asyncio
async def test_next_recipe_without_subscription(mock_callback, mock_fsm):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:
    –ú–µ—Ç–æ–¥ answer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    # –ú–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_service.check_active = AsyncMock(return_value=False)  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

    # –ú–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ answer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    mock_send_subscription_message = AsyncMock()
    mock_callback.message.answer = mock_send_subscription_message  # –ú–æ–∫–∞–µ–º answer

    # –í—ã–∑—ã–≤–∞–µ–º next_recipe
    await next_recipe(mock_callback, mock_fsm)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    mock_send_subscription_message.assert_called_with(
        mock_callback.message,
        "üîí –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
        reply_markup=get_buy_subscription_kb()
    )


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
@pytest.fixture
def mock_callback():
    """–ú–æ–∫–∏—Ä—É–µ–º callback_query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ next_recipe)"""
    mock = MagicMock()
    mock.message = MagicMock()
    mock.message.answer = AsyncMock()
    return mock


@pytest.fixture
def mock_fsm():
    """–ú–æ–∫–∏—Ä—É–µ–º FSMContext, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω"""
    return MagicMock(spec=FSMContext)
