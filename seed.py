import os
import django
import random
import requests
from decimal import Decimal
from datetime import date, timedelta
from django.core.files.base import ContentFile

# Django setup
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "foodplan.settings")
django.setup()

# –ú–æ–¥–µ–ª–∏
from users.models import TelegramUser, Profile, Category
from recipes.models import Ingredient, Recipe, RecipeIngredient, RecipeStep
from payments.models import SubscriptionPlan, Subscription

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Unsplash, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
image_urls = [
    "https://images.unsplash.com/photo-1600891964599-f61ba0e24092",
    "https://images.unsplash.com/photo-1546069901-ba9599a7e63c",
    "https://images.unsplash.com/photo-1523986371872-9d3ba2e2f642",
    "https://images.unsplash.com/photo-1613145993484-ccd7a3c3b48f",
    "https://images.unsplash.com/photo-1612197553264-bdfd7d14f9aa",
    "https://images.unsplash.com/photo-1504674900247-0877df9cc836",
    "https://images.unsplash.com/photo-1589302168068-964664d93dc0",
    "https://images.unsplash.com/photo-1562967916-eb82221dfb36",
    "https://images.unsplash.com/photo-1490645935967-10de6ba17061",
    "https://images.unsplash.com/photo-1512058564366-c9e3e0464e57",
]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ä–µ—Ü–µ–ø—Ç—É
def download_image(url, recipe):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        file_name = f"{recipe.title.replace(' ', '_')}.jpg"
        recipe.image.save(file_name, ContentFile(response.content), save=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

def run():
    print("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_names = ["–í–µ–≥–∞–Ω", "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞", "–≠–∫–æ–Ω–æ–º", "–ö–µ—Ç–æ", "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ"]
    categories = [Category.objects.get_or_create(name=name)[0] for name in category_names]

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–æ—Ñ–∏–ª—å
    user, _ = User.objects.get_or_create(username="testuser", telegram_id=123456)
    profile, _ = Profile.objects.get_or_create(user=user)
    profile.categories.set(random.sample(categories, 2))
    profile.paid_until = date.today() + timedelta(days=30)
    profile.save()

    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredient_names = ["–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ú–æ—Ä–∫–æ–≤—å", "–õ—É–∫", "–ú–∞—Å–ª–æ", "–°–æ–ª—å", "–ö–∞–±–∞—á–æ–∫", "–ß–µ—Å–Ω–æ–∫", "–¢–æ–º–∞—Ç—ã", "–ì–æ—Ä–æ—à–µ–∫", "–ü–µ—Ç—Ä—É—à–∫–∞"]
    ingredients = [Ingredient.objects.get_or_create(name=name)[0] for name in ingredient_names]

    # –†–µ—Ü–µ–ø—Ç—ã (10 —à—Ç—É–∫)
    for i in range(10):
        title = f"–û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É #{i + 1}"
        recipe = Recipe.objects.create(title=title, estimated_cost=Decimal("0.00"))
        recipe.categories.set(random.sample(categories, k=2))

        selected_ingredients = random.sample(ingredients, k=4)
        for ing in selected_ingredients:
            RecipeIngredient.objects.create(
                recipe=recipe,
                ingredient=ing,
                amount=random.randint(1, 5),
                unit="pcs",
                unit_cost=Decimal("10.00")
            )

        # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        RecipeStep.objects.create(recipe=recipe, order=1, text="–û—á–∏—Å—Ç–∏—Ç—å –æ–≤–æ—â–∏")
        RecipeStep.objects.create(recipe=recipe, order=2, text="–ù–∞—Ä–µ–∑–∞—Ç—å –∏ –æ–±–∂–∞—Ä–∏—Ç—å")

        # –°—Ç–æ–∏–º–æ—Å—Ç—å
        recipe.recalc_cost()

        # –§–æ—Ç–æ
        download_image(random.choice(image_urls), recipe)

    # –¢–∞—Ä–∏—Ñ –∏ –ø–æ–¥–ø–∏—Å–∫–∞
    plan, _ = SubscriptionPlan.objects.get_or_create(
        name="–ú–µ—Å—è—á–Ω–∞—è",
        price=Decimal("199.00"),
        duration=30,
        defaults={"description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"}
    )
    Subscription.objects.get_or_create(user=user, plan=plan)

    print("–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å –≤ –∞–¥–º–∏–Ω–∫–µ üòâ")

if __name__ == "__main__":
    run()
